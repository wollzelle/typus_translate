<%

##
#   Setup
#   this only happens once, the first time the template is called
#
@translator ||= Admin::TranslateHelper::Translator.new
@translator.setup do
  # make sure the translations exist on the model
  Admin::TranslateHelper::Translator.setup_model(@item)
%>
<%=
  # load assets
  render  :partial => 'admin/templates/translate/assets',
          :locals => { :translator => Admin::TranslateHelper::Translator } %>
<%=
  # create a form builder instance for each locale
  # and store a reference to it on the translator class
  # (this ensures we always use the same form builders,
  # not create new ones for each attibute/locale combination)
  render  :partial => 'admin/templates/translate/locales',
          :locals => { :translator => Admin::TranslateHelper::Translator, :form => form }
%>
<% end %>
<%=
##
#   Template
#   this is rendered for each translatable attribute (title, body, etc.)
#

instance = Admin::TranslateHelper::Translator.new(@item, attribute)
limit = @item.class.typus_translate_options[:limit][attribute.to_sym] if @item.class.typus_translate_options[:limit]

# use the saved form builders to render the form fields for each language
render  :partial => 'admin/templates/translate/fields',
        :locals => {  :translator => @translator,
                      :instance => instance,
                      :form => form,
                      :attribute => attribute,
                      :limit => limit
                       }

%>